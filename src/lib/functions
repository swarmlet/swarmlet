#!/usr/bin/env bash
# shellcheck disable=SC2091,SC2068,SC1083

# Define package managers
declare -A PKG_MANAGERS=(
  ["/etc/redhat-release"]=yum
  ["/etc/arch-release"]=pacman
  ["/etc/gentoo-release"]=emerge
  ["/etc/SuSE-release"]=zypp
  ["/etc/debian_version"]=apt-get
)

# Select correct package manager
for MANAGER in "${!PKG_MANAGERS[@]}"; do
  [[ -f $MANAGER ]] && PKG_MANAGER="${PKG_MANAGERS[$MANAGER]}"
done

# Utility functions
ensure-root() {
  if [[ $EUID -ne 0 ]]; then
    if [[ $(dpkg-query -s sudo) ]]; then
      echo "$PREFIX User is not root, using sudo"
      export SUDO="sudo"
    else
      echo "$PREFIX [ERROR] Please install sudo or run as root" && exit 1
    fi
  fi
}

check-bash-version() {
  if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
    echo "$PREFIX [ERROR] Unmet requirements: Bash 4"
    echo "$INDENT Your Bash version is $BASH_VERSION"
    echo "$PREFIX Exiting with error code 1" 1>&2
    exit 1
  fi
}

check-swarmlet-version() {
  pushd "$SWARMLET_ROOT" >/dev/null || exit
  git describe --tags --match "v*" "$INSTALL_BRANCH"
  popd >/dev/null || exit
}

get-own-ip-address() {
  hostname -I | awk '{print $1}'
}

install-ansible() {
  echo "$PREFIX Installing Ansible"

  source /etc/os-release

  if [ "${ID}" = "ubuntu" ]; then
    $SUDO apt-add-repository -y --update ppa:ansible/ansible
    $SUDO "$PKG_MANAGER" update -y
    $SUDO "$PKG_MANAGER" install -y ansible
  fi

  if [ "${ID}" = "debian" ]; then
    $SUDO sh -c "echo 'deb http://ftp.fr.debian.org/debian buster-backports main contrib non-free' > /etc/apt/sources.list.d/backports.list"
    $SUDO "$PKG_MANAGER" update -y
    $SUDO "$PKG_MANAGER" install -y -t buster-backports ansible
  fi

  echo "$PREFIX Running Ansible playbooks"
  pushd "$ANSIBLE_ROOT" &>/dev/null || exit
  ansible-playbook "$ANSIBLE_ROOT/playbooks/setup.yml"
  ansible-playbook "$ANSIBLE_ROOT/swarmlet.yml"

  # check if it works without installing entire collection
  # echo "$PREFIX Fetching collections"
  # ansible-galaxy collection install community.general &>/dev/null

  popd &>/dev/null || exit
}

abort-installation() {
  echo "$PREFIX Aborting installation"
  exit 1
}

check-docker() {
  if $(systemctl show --property ActiveState docker | grep -q "ActiveState=active"); then
    echo "Docker is running"
    docker --version
  else
    echo "Docker is not running, exiting"
    exit 1
  fi
}

git-set-config() {
  DOMAIN=${1:-"$HOSTNAME.local"}
  git config user.email "$GIT_USER@$DOMAIN"
  git config user.name "$GIT_USER"
}

git-local-push() {
  REPO_SRC=$1
  REPO_NAME=$(basename "$REPO_SRC")
  pushd "$REPO_SRC" >/dev/null || exit
  git init
  git-set-config "$ROOT_DOMAIN"
  git add .
  git commit -m "initial"
  git push "$GIT_REPO_ROOT/$REPO_NAME.git" master
  chown -R "$GIT_USER:$GIT_USER" "$GIT_DATA_ROOT/$REPO_NAME"
  popd >/dev/null || exit
}

uninstall-swarmlet() {
  if [[ -d "$GIT_DATA_ROOT" ]]; then
    $SUDO rm -rf /mnt/gfs/git/data
    $SUDO userdel git -f
  fi
  [[ -f /usr/local/sbin/swarmlet ]] && unlink /usr/local/sbin/swarmlet
  if [[ -d "$GIT_REPO_ROOT" ]]; then $SUDO rm -rf "$GIT_REPO_ROOT"; fi
  if [[ -d "$SWARMLET_ROOT" ]]; then $SUDO rm -rf "$SWARMLET_ROOT"; fi
}

reinstall-swarmlet() {
  uninstall-swarmlet
  curl -fsSL https://get.swarmlet.dev | bash -s "$@"
}

check-existing() {
  if [[ -d "$GIT_DATA_ROOT" ]] ||
    [[ -d "$GIT_REPO_ROOT" ]] ||
    [[ -f /usr/local/sbin/swarmlet ]] ||
    [[ -d $SWARMLET_ROOT ]]; then
    return 0
  else
    return 1
  fi
}

check-swarm() {
  if [[ "$(docker info 2>/dev/null | grep Swarm | sed 's/Swarm: //g')" == " active" ]]; then
    return 1
  else
    return 0
  fi
}

is-service-healthy() {
  SERVICE="$1"
  REPLICAS=$(docker stack services "$SERVICE" --format={{.Replicas}})

  if [[ $(echo "$REPLICAS" | sed 's/\/[0-9]//' | tr '\n0' ' ' | tr -d '[:space:]') -gt 0 ]]; then
    return 0
  else
    echo "$PREFIX $SERVICE not (yet) healthy"
    return 1
  fi
}

list-internal-functions() {
  typeset -f | awk '/ \(\) $/ && !/^list-internal-functions / {print $1}'
}

get-random-open-port() {
  comm -23 \
    <(seq 49152 65535 | sort) \
    <(ss -Htan | awk '{print $4}' | cut -d':' -f2 | sort -u) |
    shuf |
    head -n 1
}

nuke() {
  uninstall-swarmlet
  for CONFIG in $(docker config ls --format {{.ID}}); do
    docker config rm "$CONFIG"
  done
  for SECRET in $(docker secret ls --format {{.ID}}); do
    docker config rm "$SECRET"
  done
  for NETWORK in $(docker network ls --format {{.Name}}); do
    docker config rm "$NETWORK"
  done
  $SUDO apt-get remove -y --purge docker docker-compose
  $SUDO apt autoremove -y
}
